function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { useState, useEffect, useRef, useCallback, useContext, createContext } from "react";
import useForceUpdate from "use-force-update";
import dotnetify from "dotnetify";
const DotNetifyContext = createContext({
  states: {
    current: {}
  },
  vms: {
    current: {}
  },
  update: (model, newState) => {
    throw new Error(`${model} not initialized: ${newState}`);
  }
});
export const DotNetifyProvider = props => {
  const vms = useRef({});
  const states = useRef({});
  const forceUpdate = useForceUpdate();
  vms.current = dotnetify.react.getViewModels() // @ts-ignore
  .reduce((prev, curr) => _objectSpread({}, prev, {
    [curr.$vmId]: curr
  }), {});
  const update = useCallback((model, newState) => {
    states.current = _objectSpread({}, states.current, {
      [model]: newState
    });
    forceUpdate();
  }, [forceUpdate]);
  return React.createElement(DotNetifyContext.Provider, {
    value: {
      vms,
      states,
      update
    }
  }, props.children);
};
export function useDotNetify(model, initialState) {
  const {
    vms,
    states,
    update
  } = useContext(DotNetifyContext);

  if (!states.current[model]) {
    update(model, initialState);
  }

  useEffect(() => {
    let vm = vms.current[model];

    if (vm === undefined) {
      const component = {
        state: states.current[model],
        setState: newState => {
          update(model, newState);
        }
      };
      vm = dotnetify.react.connect(model, component, {
        getState: () => states.current[model],
        setState: newState => {
          update(model, newState);
        }
      });
    }

    return () => vm && vm.$destroy();
  }, [model, vms, states, update]);
  return [states.current[model], vms.current[model]];
}
export function useProperty(model, property) {
  const {
    vms,
    states
  } = useContext(DotNetifyContext);
  const [value, setValue] = useState(states.current[model][property]);
  const didChange = useRef(false);

  const update = value => {
    setValue(value);
    didChange.current = true;
  };

  const dispatch = value => {
    debugger;

    if (vms.current[model] === undefined) {
      throw new Error("Unable to dispatch, vm has not been initialized.");
    }

    vms.current[model].$dispatch({
      [property]: value
    });
    didChange.current = true;
  };

  const state = states.current[model];
  useEffect(() => {
    if (value !== state[property] && !didChange.current) {
      setValue(state[property]);
      didChange.current = false;
    }
  }, [model, property, state, value]);
  return [value, update, dispatch];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,